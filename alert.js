// Этот код используется в строгом режиме
"use strict";

alert("Привет");

alert("Мир");

let user1 = "John";
let age23 = 25;
let message12 = "Hello";
message12 = "Hellow";
let myVelyLong = "Vityaz";
let user123 = "123";
let _ = "3";
let $ = "4";
alert("_+$"); //7

alert("age"); 




let admin, name23, user23;
user23 = "John";
admin = user23;
alert( admin );  


/*const myBirthday = "16.01.1986"; - правильное
myBirthday = "19.02.2090"; - неправильное*/

const COLOR_RED = "#F00";
const COLOR_GREEN = "#0F0";
const COLOR_BLUE = "#00F";
const COLOR_ORANGE = "#FF7F00";

// ...когда нам нужно выбрать цвет
let color = COLOR_ORANGE;
alert(color); // #FF7F00

let ourPlanetName = "Земля";
let currentUserName = "Джон";
let mainUserName = "Мария";

/*const BIRTHDAY = '18.04.1982'; 

const AGE = first(BIRTHDAY); */

/*Типы данных*/
/*Динамическая типизация - типы данных есть, но переменные не привязаны ни к одному из них*/
let message = "12345";
message = "User";

/*Число*/
let n = "12345";
n = "12.345";
alert (1/0); // (1/0 = Infinity) - бесконечность
alert ("не число"/ 2+5); //Nan - мат ошибка
/*const bigInt = 1234567890123456789012345678901234567890n;  bigInt - это тип, который дает прописывать огроменные числа с n в конце*/


/*Строка*/
/*let str0 = "Привет";
let str1 = `${str}`; //Обратные кавычки позволяют встраивать переменные `${str}`;*/
let name123 = "Иван";
alert ( `Привет, ${name123}!` );
alert (`результат: ${1+2}`);
alert (`вывод: ${250+250}`);

/*Булевый логический тип*/
//Булевый тип (boolean) может принимать только два значения: true (истина) и false (ложь).
let isGreater = 5 > 1;
alert(isGreater); // true - результатом сравнения будет да

/*Спец значение null - представляет собой «ничего», «пусто» или «значение неизвестно»*/
let age1 = null; // Значение неизвестно

/*Специальное значение undefined - значение не было присвоено; undefined – для проверок, была ли переменная назначена.*/
let ag1e = 123;
ag1e = undefined;
alert (ag1e);

/*Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной. Используется для вывода имени той или иной переменной
Имеет две формы: typeof x или typeof(x).*/
typeof 0 // "number" , т.е. ноль - это число - значит тип данных number
typeof 10n // "bigint"
typeof true // "boolean"

let name = "Ilya";

alert(`hello ${1}`);
alert(`hello ${"name"}`);
alert (`hello ${name}`);

/*Взаимодействие: alert, prompt, confirm*/
/*Функция prompt принимает два аргумента:
title - Текст для отображения в окне.
default - Необязательный второй параметр, 
который устанавливает начальное значение в поле для текста в окне.
result = prompt(title, [default]);*/
let age = prompt(`Сколько тебе лет?`, 100);
alert (`Тебе ${age}лет!`); // Тебе 100 лет! 

/*Функция confirm отображает модальное окно с текстом вопроса question и двумя кнопками: OK и Отмена.
Результат – true, если нажата кнопка OK. В других случаях – false.
result = confirm(question);*/
let isBoss = confirm("Ты здесь главный?");
alert(isBoss); //true - если нажата ОК


let name1231 = prompt("Ваше имя?", "");
alert(name1231);

/*Преобразование типов*/

/*Строковое преобразование - value
alert(value) преобразует значение к строке
String(value) преобразует значение к строке
Преобразование происходит очевидным образом. false становится "false", null становится "null" и т.п.*/
let value = true;
alert(typeof value); //boolean

/*Численное преобразование - Number(value)
Численное преобразование происходит в математических функциях и выражениях.
Например, когда операция деления / применяется не к числу:*/
alert ("6"/"2"); // 3, строки преобразуются в числа.

let str = "123";
alert(typeof str); //string

/*Логическое преобразование, может быть выполнено явно с помощью функции Boolean(value)
 Правило преобразования:
- Значения, которые интуитивно «пустые», вроде 0, пустой строки, null, undefined и NaN, становятся false.
- Все остальные значения становятся true. */
alert (Boolean(1)); // true
alert(Boolean(0)); // false

alert("Привет, Мир!!!"); // true
alert(""); // false

/* Базовые операторы
Операнд – то, к чему применяется оператор. 
Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2. Иногда их называют «аргументами» вместо «операндов».*/
let x = 1;
x = -x;
alert(x) // -1, применили унарный минус (унарный минус используется при одном операнде, н-р -)

let x = 2, y = 7;
alert(y-x); // 5, применили бинарный минус (бинарный минус используется при двух операндах, н-р х и у)

/*Взятие остатка - оператор
Результат a % b – это остаток от целочисленного деления a на b.*/
alert( 5 % 2 ); // 1, остаток от деления 5 на 2 - 4:2=2 и остаток 1
alert( 8 % 3 ); // 2, остаток от деления 8 на 3 - 6:3=2 и остаток 2

/*Возведение в степень - оператор
В выражении a ** b оператор возведения в степень умножает a на само себя b раз.*/
alert(2**2); // 4
alert(2**4); //16
alert(3**4); //81

/* Сложение строк при помощи бинарного +
бинарный оператор '+' применить к строкам, то он их объединяет в одну*/
 let s = "моя" + "строка";
 alert(s); // моястрока  
 //  если хотя бы один операнд является строкой, то второй будет также преобразован в строку
 alert(`1`+2); //12
 alert(2+`1`); //21
 alert(5+50+`7`); //557
 /*Здесь операторы работают один за другим. Первый + складывает два числа и возвращает 55, 
 затем следующий + объединяет результат со строкой, производя действие 4 + '1' = 41.
 Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.
 */ 
alert(6 -`2`); // 4, '2' приводится к числу
alert(`6`/`2`); //3, оба операнда приводятся к числам

/*Приведение к числу, унарный +
Плюс + существует в двух формах: бинарной, которую мы использовали выше, и унарной.
Унарный, то есть применённый к одному значению, плюс + ничего не делает с числами. Но если операнд не число, унарный плюс преобразует его в число.*/
let x = 1;
alert(+x); // 1
let y = -2;
alert(+y); // -2
// Преобразует не числа в числа
let (+true); // 1
alert(+""); // 0

let apples = "5";
let oranges = "7";
alert(apples+oranges); // 57 - сложение строк при помощи бинарного сложения

let apples12 = "5";
let oranges12 = "7";
alert (+apples12 + +oranges12); // 12 or alert(Number(apples)+Number(oranges)); // 12
/*Так как «унарный плюс» имеет приоритет 15, который выше, чем 12 у «сложения» (бинарный плюс), 
то в выражении "+apples + +oranges" сначала выполнятся унарные плюсы, а затем сложение.*/





